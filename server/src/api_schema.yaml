openapi: 3.0.0
info:
  title: Easyappz Avito-lite API
  version: 1.0.0
  description: >-
    HTTP-only API (no sockets) for simplified classifieds with JWT auth via Authorization header.
servers:
  - url: http://localhost:4000/api
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        name: { type: string }
        avatarUrl: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AuthResponse:
      type: object
      properties:
        token: { type: string }
        user:
          $ref: '#/components/schemas/User'
    Listing:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        description: { type: string }
        price: { type: number }
        images:
          type: array
          items: { type: string }
        category: { type: string }
        city: { type: string }
        owner: { type: string }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
paths:
  /hello:
    get:
      summary: Hello check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
  /status:
    get:
      summary: Health status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  timestamp: { type: string }
  /categories:
    get:
      summary: Get categories list
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key: { type: string }
                    label: { type: string }
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name, password]
              properties:
                email: { type: string }
                name: { type: string }
                password: { type: string, minLength: 6 }
      responses:
        '201':
          description: Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { description: Validation error }
        '409': { description: Email already exists }
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { description: Validation error }
        '401': { description: Invalid credentials }
  /auth/me:
    get:
      summary: Get current user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
  /users/me:
    get:
      summary: Get profile (same as auth/me)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
    patch:
      summary: Update current user (name, avatarUrl)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                avatarUrl: { type: string, nullable: true }
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': { description: Validation error }
        '401': { description: Unauthorized }
  /listings:
    get:
      summary: Get active listings
      responses:
        '200':
          description: List of listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
    post:
      summary: Create listing
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, price, category]
              properties:
                title: { type: string }
                description: { type: string }
                price: { type: number }
                images:
                  type: array
                  items: { type: string }
                category: { type: string }
                city: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400': { description: Validation error }
        '401': { description: Unauthorized }
  /listings/{id}:
    get:
      summary: Get listing by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '404': { description: Not found }
    patch:
      summary: Update listing (owner only)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                price: { type: number }
                images:
                  type: array
                  items: { type: string }
                category: { type: string }
                city: { type: string }
                isActive: { type: boolean }
      responses:
        '200':
          description: Updated listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400': { description: Validation error }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
    delete:
      summary: Delete listing (owner only)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
  /me/listings:
    get:
      summary: Get my listings
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of my listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
        '401': { description: Unauthorized }
